#!/usr/bin/env python3
"""
Generate Lookup Tables for INT8 NPU Mel Spectrogram Kernel
Generates twiddle factors, mel filterbank weights, and Hann window in Q7/INT8 format
"""

import numpy as np
import librosa

# Constants matching Whisper preprocessing
SAMPLE_RATE = 16000
N_FFT = 512
HOP_LENGTH = 160
WINDOW_SIZE = 400
N_MELS = 80

def generate_twiddle_factors_q7():
    """Generate twiddle factors for 512-point FFT in Q7 format"""
    print("Generating twiddle factors (Q7)...")

    # For radix-2 FFT, we need twiddle factors W_N^k = e^(-2πi*k/N)
    # Store 256 unique values (cos and sin components)
    angles = 2 * np.pi * np.arange(256) / 512

    cos_vals = np.cos(angles)
    sin_vals = np.sin(angles)

    # Quantize to Q7: [-128, 127] represents [-1.0, ~1.0]
    cos_q7 = np.clip(np.round(cos_vals * 127), -128, 127).astype(np.int8)
    sin_q7 = np.clip(np.round(sin_vals * 127), -128, 127).astype(np.int8)

    return cos_q7, sin_q7


def generate_hann_window_q7():
    """Generate Hann window for 400 samples in Q7 format"""
    print("Generating Hann window (Q7)...")

    # Hann window: 0.5 * (1 - cos(2πn/(N-1)))
    n = np.arange(WINDOW_SIZE)
    hann = 0.5 * (1 - np.cos(2 * np.pi * n / (WINDOW_SIZE - 1)))

    # Quantize to Q7
    hann_q7 = np.clip(np.round(hann * 127), 0, 127).astype(np.int8)

    return hann_q7


def generate_mel_filterbank_q7():
    """Generate mel filterbank weights in Q7 format"""
    print("Generating mel filterbank (Q7)...")

    # Use librosa to generate mel filterbank
    mel_filters = librosa.filters.mel(
        sr=SAMPLE_RATE,
        n_fft=N_FFT,
        n_mels=N_MELS,
        fmin=0,
        fmax=SAMPLE_RATE // 2
    )

    # Only use first 256 bins (Nyquist symmetry)
    mel_filters = mel_filters[:, :256]

    # Normalize and quantize to Q7 [0, 127]
    # Find max value for proper scaling
    max_val = mel_filters.max()
    mel_filters_normalized = mel_filters / max_val

    mel_filters_q7 = np.clip(
        np.round(mel_filters_normalized * 127),
        0, 127
    ).astype(np.int8)

    return mel_filters_q7, max_val


def generate_log_magnitude_lut():
    """Generate log magnitude lookup table"""
    print("Generating log magnitude LUT...")

    # Map squared magnitude [0, 32258] to log scale INT8 [-128, 127]
    # Input range: Q7 complex multiply gives mag² up to 127²+127² = 32258
    max_mag_sq = 32258

    lut = np.zeros(256, dtype=np.int8)
    for i in range(256):
        # Map index to squared magnitude
        mag_sq = (i / 255.0) * max_mag_sq

        if mag_sq > 0:
            # Log scale: log(sqrt(mag_sq)) = 0.5 * log(mag_sq)
            log_val = 0.5 * np.log(mag_sq + 1e-10)

            # Normalize to INT8 range
            # Typical range: log(1) to log(32258) = 0 to 10.38
            # Map to [-128, 127]
            normalized = (log_val / 10.38) * 255 - 128
            lut[i] = np.clip(np.round(normalized), -128, 127)
        else:
            lut[i] = -128  # Minimum value for silence

    return lut


def write_c_header(cos_q7, sin_q7, hann_q7, mel_filters_q7, log_lut):
    """Write all LUTs to C header file"""
    print("Writing C header file...")

    with open('mel_luts.h', 'w') as f:
        f.write("""// Auto-generated Lookup Tables for NPU Mel Spectrogram
// Generated by generate_luts.py
// DO NOT EDIT MANUALLY

#ifndef MEL_LUTS_H
#define MEL_LUTS_H

#include <stdint.h>

// FFT Twiddle Factors (Q7 format, 256 entries)
// cos(2πk/512) for k=0..255
const int8_t twiddle_cos_q7[256] = {
""")

        # Write twiddle cos
        for i in range(0, 256, 16):
            values = ', '.join(f'{x:4d}' for x in cos_q7[i:i+16])
            f.write(f'    {values},\n')

        f.write('};\n\n')

        # Write twiddle sin
        f.write("""// sin(2πk/512) for k=0..255
const int8_t twiddle_sin_q7[256] = {
""")
        for i in range(0, 256, 16):
            values = ', '.join(f'{x:4d}' for x in sin_q7[i:i+16])
            f.write(f'    {values},\n')

        f.write('};\n\n')

        # Write Hann window
        f.write("""// Hann window coefficients (Q7 format, 400 samples)
const int8_t hann_window_q7[400] = {
""")
        for i in range(0, 400, 16):
            values = ', '.join(f'{x:4d}' for x in hann_q7[i:i+16])
            f.write(f'    {values},\n')

        f.write('};\n\n')

        # Write mel filterbank (80 x 256)
        f.write("""// Mel filterbank weights (Q7 format, 80 filters x 256 bins)
const int8_t mel_filter_weights_q7[80][256] = {
""")
        for mel_idx in range(80):
            f.write('    {')
            for i in range(0, 256, 16):
                if i > 0:
                    f.write('     ')
                values = ', '.join(f'{x:4d}' for x in mel_filters_q7[mel_idx, i:i+16])
                f.write(values)
                if i < 240:
                    f.write(',\n')
            f.write('}')
            if mel_idx < 79:
                f.write(',\n')
            else:
                f.write('\n')

        f.write('};\n\n')

        # Write log magnitude LUT
        f.write("""// Log magnitude lookup table (256 entries)
// Maps squared magnitude index to log scale INT8
const int8_t log_magnitude_lut[256] = {
""")
        for i in range(0, 256, 16):
            values = ', '.join(f'{x:4d}' for x in log_lut[i:i+16])
            f.write(f'    {values},\n')

        f.write('};\n\n')

        # Helper inline functions
        f.write("""// Helper function to get twiddle factor for FFT stage
static inline void get_twiddle_q7(uint32_t stage, uint32_t j, int8_t* cos_val, int8_t* sin_val) {
    uint32_t k = (j * 512) >> (stage + 1);  // Efficient bit-shift
    *cos_val = twiddle_cos_q7[k & 0xFF];
    *sin_val = twiddle_sin_q7[k & 0xFF];
}

// Helper function for log magnitude lookup
static inline int8_t fast_log_magnitude(int16_t mag_sq) {
    // Scale mag_sq [0, 32258] to index [0, 255]
    uint8_t index = (uint8_t)((mag_sq * 255) / 32258);
    return log_magnitude_lut[index];
}

#endif // MEL_LUTS_H
""")

    print(f"✅ Generated mel_luts.h ({os.path.getsize('mel_luts.h')} bytes)")


def main():
    print("=" * 70)
    print("NPU MEL SPECTROGRAM LOOKUP TABLE GENERATOR")
    print("=" * 70)
    print()

    # Generate all LUTs
    cos_q7, sin_q7 = generate_twiddle_factors_q7()
    hann_q7 = generate_hann_window_q7()
    mel_filters_q7, mel_scale = generate_mel_filterbank_q7()
    log_lut = generate_log_magnitude_lut()

    # Write to C header
    write_c_header(cos_q7, sin_q7, hann_q7, mel_filters_q7, log_lut)

    # Print statistics
    print()
    print("Statistics:")
    print(f"  Twiddle factors: 256 × 2 = {256*2} bytes")
    print(f"  Hann window:     {len(hann_q7)} bytes")
    print(f"  Mel filterbank:  {mel_filters_q7.size} bytes")
    print(f"  Log magnitude:   {len(log_lut)} bytes")
    print(f"  Total:           {256*2 + len(hann_q7) + mel_filters_q7.size + len(log_lut)} bytes")
    print()
    print(f"  Mel filter scaling factor: {mel_scale:.6f}")
    print(f"  (Scale NPU output by {mel_scale:.4f} to get true mel energies)")
    print()
    print("=" * 70)
    print("✅ LOOKUP TABLES GENERATED SUCCESSFULLY!")
    print("=" * 70)
    print()
    print("Next step: Compile mel_int8_optimized.c with mel_luts.h")


if __name__ == '__main__':
    import os
    main()
