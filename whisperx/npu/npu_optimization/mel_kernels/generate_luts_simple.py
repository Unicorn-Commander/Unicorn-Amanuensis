#!/usr/bin/env python3
"""
Simplified LUT Generator - No librosa dependency
Generates lookup tables using only numpy
"""

import numpy as np
import os

# Constants
SAMPLE_RATE = 16000
N_FFT = 512
N_MELS = 80

def hz_to_mel(hz):
    """Convert Hz to mel scale"""
    return 2595 * np.log10(1 + hz / 700)

def mel_to_hz(mel):
    """Convert mel to Hz"""
    return 700 * (10**(mel / 2595) - 1)

def generate_mel_filterbank_manual():
    """Generate mel filterbank without librosa"""
    print("Generating mel filterbank (manual calculation)...")

    # Mel scale parameters
    fmin = 0
    fmax = SAMPLE_RATE // 2

    # Convert to mel scale
    mel_min = hz_to_mel(fmin)
    mel_max = hz_to_mel(fmax)

    # Create N_MELS+2 points in mel scale
    mel_points = np.linspace(mel_min, mel_max, N_MELS + 2)
    hz_points = mel_to_hz(mel_points)

    # Convert Hz to FFT bin numbers
    bin_points = np.floor((N_FFT + 1) * hz_points / SAMPLE_RATE).astype(int)

    # Create filterbank matrix
    mel_filters = np.zeros((N_MELS, 256))

    for m in range(N_MELS):
        left = bin_points[m]
        center = bin_points[m + 1]
        right = bin_points[m + 2]

        # Create triangular filter
        for k in range(256):
            if left <= k < center:
                mel_filters[m, k] = (k - left) / (center - left)
            elif center <= k <= right:
                mel_filters[m, k] = (right - k) / (right - center)

    # Normalize
    max_val = mel_filters.max()
    mel_filters_normalized = mel_filters / max_val

    # Quantize to Q7 [0, 127]
    mel_filters_q7 = np.clip(
        np.round(mel_filters_normalized * 127),
        0, 127
    ).astype(np.int8)

    return mel_filters_q7, max_val

def generate_twiddle_factors_q7():
    """Generate twiddle factors for 512-point FFT in Q7"""
    print("Generating twiddle factors (Q7)...")

    angles = 2 * np.pi * np.arange(256) / 512
    cos_vals = np.cos(angles)
    sin_vals = np.sin(angles)

    cos_q7 = np.clip(np.round(cos_vals * 127), -128, 127).astype(np.int8)
    sin_q7 = np.clip(np.round(sin_vals * 127), -128, 127).astype(np.int8)

    return cos_q7, sin_q7

def generate_hann_window_q7():
    """Generate Hann window for 400 samples"""
    print("Generating Hann window (Q7)...")

    n = np.arange(400)
    hann = 0.5 * (1 - np.cos(2 * np.pi * n / 399))
    hann_q7 = np.clip(np.round(hann * 127), 0, 127).astype(np.int8)

    return hann_q7

def generate_log_magnitude_lut():
    """Generate log magnitude lookup table"""
    print("Generating log magnitude LUT...")

    lut = np.zeros(256, dtype=np.int8)
    max_mag_sq = 32258  # 127^2 + 127^2

    for i in range(256):
        mag_sq = (i / 255.0) * max_mag_sq
        if mag_sq > 0:
            log_val = 0.5 * np.log(mag_sq + 1e-10)
            normalized = (log_val / 10.38) * 255 - 128
            lut[i] = np.clip(np.round(normalized), -128, 127)
        else:
            lut[i] = -128

    return lut

def write_c_header(cos_q7, sin_q7, hann_q7, mel_filters_q7, log_lut):
    """Write LUTs to C header"""
    print("Writing mel_luts.h...")

    with open('mel_luts.h', 'w') as f:
        f.write("""// Auto-generated Lookup Tables for NPU Mel Spectrogram
// Generated by generate_luts_simple.py
// DO NOT EDIT MANUALLY

#ifndef MEL_LUTS_H
#define MEL_LUTS_H

#include <stdint.h>

// Twiddle factors (Q7 format, 256 entries)
const int8_t twiddle_cos_q7[256] = {
""")

        for i in range(0, 256, 16):
            values = ', '.join(f'{x:4d}' for x in cos_q7[i:i+16])
            f.write(f'    {values},\n')
        f.write('};\n\nconst int8_t twiddle_sin_q7[256] = {\n')

        for i in range(0, 256, 16):
            values = ', '.join(f'{x:4d}' for x in sin_q7[i:i+16])
            f.write(f'    {values},\n')
        f.write('};\n\n// Hann window (Q7 format, 400 samples)\nconst int8_t hann_window_q7[400] = {\n')

        for i in range(0, 400, 16):
            values = ', '.join(f'{x:4d}' for x in hann_q7[i:i+16])
            f.write(f'    {values},\n')
        f.write('};\n\n// Mel filterbank (Q7 format, 80 x 256)\nconst int8_t mel_filter_weights_q7[80][256] = {\n')

        for mel_idx in range(80):
            f.write('    {')
            for i in range(0, 256, 16):
                if i > 0:
                    f.write('     ')
                values = ', '.join(f'{x:4d}' for x in mel_filters_q7[mel_idx, i:i+16])
                f.write(values)
                if i < 240:
                    f.write(',\n')
            f.write('}')
            if mel_idx < 79:
                f.write(',\n')

        f.write('\n};\n\n// Log magnitude LUT\nconst int8_t log_magnitude_lut[256] = {\n')
        for i in range(0, 256, 16):
            values = ', '.join(f'{x:4d}' for x in log_lut[i:i+16])
            f.write(f'    {values},\n')
        f.write('};\n\n')

        f.write("""// Helper functions
static inline void get_twiddle_q7(uint32_t stage, uint32_t j, int8_t* cos_val, int8_t* sin_val) {
    uint32_t k = (j * 512) >> (stage + 1);
    *cos_val = twiddle_cos_q7[k & 0xFF];
    *sin_val = twiddle_sin_q7[k & 0xFF];
}

static inline int8_t fast_log_magnitude(int16_t mag_sq) {
    uint8_t index = (uint8_t)((mag_sq * 255) / 32258);
    return log_magnitude_lut[index];
}

#endif // MEL_LUTS_H
""")

    size = os.path.getsize('mel_luts.h')
    print(f"✅ Generated mel_luts.h ({size:,} bytes)")

def main():
    print("=" * 70)
    print("NPU MEL LOOKUP TABLE GENERATOR (Simplified)")
    print("=" * 70)
    print()

    cos_q7, sin_q7 = generate_twiddle_factors_q7()
    hann_q7 = generate_hann_window_q7()
    mel_filters_q7, mel_scale = generate_mel_filterbank_manual()
    log_lut = generate_log_magnitude_lut()

    write_c_header(cos_q7, sin_q7, hann_q7, mel_filters_q7, log_lut)

    print()
    print("Statistics:")
    print(f"  Twiddle factors: {256*2:,} bytes")
    print(f"  Hann window:     {len(hann_q7):,} bytes")
    print(f"  Mel filterbank:  {mel_filters_q7.size:,} bytes")
    print(f"  Log magnitude:   {len(log_lut):,} bytes")
    print(f"  Total:           {256*2 + len(hann_q7) + mel_filters_q7.size + len(log_lut):,} bytes")
    print()
    print(f"  Mel scaling: {mel_scale:.6f}")
    print()
    print("=" * 70)
    print("✅ SUCCESS! Ready for Phase 2.2/2.3 implementation")
    print("=" * 70)

if __name__ == '__main__':
    main()
